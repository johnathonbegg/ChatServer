import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

public class ChatClient {
	private static ObjectOutputStream toServer = null;
	private static ObjectInputStream fromServer = null;
	static Scanner scan;
	static Socket sock;
	static BufferedReader reader;

	public ChatClient() {

	}

	public static void main(String args[]) {
		// String[] arrOfStr = null;
		try {

			System.out.println(" To connect to the server: /connect <servername> <port#>");
			// Create Scanner for user input
			scan = new Scanner(System.in);
			reader = new BufferedReader(new InputStreamReader(System.in));
			String msg;
			// create condition for checking for connectivity
			Boolean connected = false;
			while (!connected) {
				msg = reader.readLine();
				connected = connectToServer(msg);
				if (!connected) {
					System.out.println("Failed to connect. Please, try again");
				}
			}

			// once connected get welcome reply;
			Responce welcome = (Responce) fromServer.readObject();
			printResponce(welcome);
			boolean nickSet = false;
			while (!nickSet) {
				msg = reader.readLine();
				if (!msg.startsWith("/nick")) {
					System.out.println("must use /nick");
				} else {
					nickSet = setNickname(msg);

				}
			}
			// get up to speed with server
			Responce res = (Responce) fromServer.readObject();
			printResponce(res);

			while (true) {

				doCommands();
				// Get the message from the user

			}

		} catch (IOException e) {
			// System.out.println(e);
			System.out.println("Disconnected from server.");
			System.out.println("Please Try again");
			System.exit(1);
		} catch (ClassNotFoundException e) {
			//
			e.printStackTrace();
		}
	}

	private static boolean setNickname(String msg) throws ClassNotFoundException, IOException {
		//
		Command com = new Command(msg);
		toServer.writeObject(com);
		Responce res = (Responce) fromServer.readObject();
		printResponce(res);
		return res.getSuccess();
	}

	private static void doCommands() throws IOException, ClassNotFoundException {
		String theMsg = scan.nextLine();

		// Send the message to the server
		Command command = new Command(theMsg);

		if (theMsg.startsWith("/quit")) {
			// Alert Server that user is disconnecting
			command = new Command("/quit");
			toServer.writeObject(command);
			// flush output Stream
			toServer.flush();
			// terminate connection
			Responce res = (Responce) fromServer.readObject();
			printResponce(res);
			scan.close();

			System.out.println("Closing program");
			toServer.close();
			fromServer.close();
			sock.close();

			System.exit(0);
		} else {

			// send Command to the Server
			toServer.writeObject(command);

			// Read reply from the server
			// String replyMsg = (String) fromServer.readObject();
			Responce servRes = (Responce) fromServer.readObject();
			printResponce(servRes);

		}

	}

	/**
	 * Prints the responce generated by th e server
	 * 
	 * @param res
	 *            - responce object recieved from server
	 */
	public static void printResponce(Responce res) {
		String[] rMsg = res.getReply();
		for (String str : rMsg) {
			System.out.println(str);
		}
	}

	// returns true if connection established
	public static boolean connectToServer(String msg) throws UnknownHostException, IOException {
		boolean ret = false;

		String[] arrOfStr = null;
		if (msg.startsWith("/connect")) {
			arrOfStr = msg.split(" ", 5);
			System.out.println("attempting to connect to :" + arrOfStr[1] + " \nat port: " + arrOfStr[2]);
			String host = arrOfStr[1];
			int port = Integer.parseInt(arrOfStr[2]);

			// Create socket for connection to server
			sock = new Socket(host, port);

			// Create an output stream to send data to the server
			toServer = new ObjectOutputStream(sock.getOutputStream());

			// Create an input stream to receive data from the server
			fromServer = new ObjectInputStream(sock.getInputStream());
			ret = true;
		}

		return ret;
	}
}